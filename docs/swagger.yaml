basePath: /
definitions:
  dto.CreateUserDto:
    properties:
      name:
        type: string
      password:
        minLength: 6
        type: string
      username:
        minLength: 3
        type: string
    required:
    - name
    - password
    - username
    type: object
  dto.InputLoginDto:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  dto.OutputToken:
    properties:
      token:
        type: string
    type: object
  dto.UpdateUserDto:
    properties:
      name:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
  models.User:
    description: User object
    properties:
      createdAt:
        type: string
      id:
        type: integer
      name:
        type: string
      password:
        minLength: 6
        type: string
      updatedAt:
        type: string
      username:
        minLength: 3
        type: string
    required:
    - name
    - password
    - username
    type: object
host: localhost:5000
info:
  contact: {}
  description: API desenvolvida para projeto academico
  title: API Mensina
  version: "1.0"
paths:
  /login:
    post:
      consumes:
      - application/json
      parameters:
      - description: Authentication data
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/dto.InputLoginDto'
      produces:
      - application/json
      responses:
        "201":
          description: Token
          schema:
            $ref: '#/definitions/dto.OutputToken'
      summary: Authenticate
      tags:
      - Auth
  /user:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
      summary: Get all users
      tags:
      - User
    post:
      consumes:
      - application/json
      parameters:
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.CreateUserDto'
      produces:
      - application/json
      responses:
        "201":
          description: User
          schema:
            $ref: '#/definitions/models.User'
      summary: Create a new user
      tags:
      - User
  /user/{id}:
    delete:
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
      security:
      - BearerAuth: []
      summary: Delete user
      tags:
      - User
    get:
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/models.User'
      summary: Get user by ID
      tags:
      - User
    put:
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User object
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateUserDto'
      responses:
        "204":
          description: Success
      security:
      - BearerAuth: []
      summary: Update user by ID
      tags:
      - User
securityDefinitions:
  BearerAuth:
    description: 'Insira o token de autenticação no formato: "Bearer {token}"'
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
