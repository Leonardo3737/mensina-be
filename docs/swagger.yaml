basePath: /
definitions:
  dto.CreateUserDto:
    properties:
      name:
        type: string
      password:
        maxLength: 50
        minLength: 6
        type: string
      username:
        maxLength: 50
        minLength: 3
        type: string
    required:
    - password
    - username
    type: object
  dto.InputLoginDto:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  dto.OutputAnswerDto:
    properties:
      description:
        type: string
      id:
        type: integer
    type: object
  dto.OutputQuestionDto:
    properties:
      answers:
        items:
          $ref: '#/definitions/dto.OutputAnswerDto'
        type: array
      description:
        type: string
      id:
        type: integer
      title:
        type: string
    type: object
  dto.OutputToken:
    properties:
      token:
        type: string
    type: object
  dto.QuizRank:
    properties:
      quizId:
        type: integer
      quizTitle:
        type: string
      score:
        type: integer
      tagDescription:
        type: string
      tagId:
        type: integer
    type: object
  dto.QuizSession:
    properties:
      correct:
        type: integer
      questions:
        additionalProperties:
          $ref: '#/definitions/dto.Status'
        type: object
      quizzId:
        type: integer
      score:
        type: integer
      total:
        type: integer
      userId:
        type: integer
    type: object
  dto.Status:
    enum:
    - 0
    - 1
    - 2
    type: integer
    x-enum-varnames:
    - Unanswered
    - InCorrect
    - Correct
  dto.TagRank:
    properties:
      tagDescription:
        type: string
      tagId:
        type: integer
      totalscore:
        type: integer
    type: object
  dto.UpdateUserDto:
    properties:
      name:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
  dto.UserKpiDto:
    properties:
      quizzesRank:
        items:
          $ref: '#/definitions/dto.QuizRank'
        type: array
      tagsRank:
        items:
          $ref: '#/definitions/dto.TagRank'
        type: array
      totaScore:
        type: integer
      userId:
        type: integer
    type: object
  models.Quiz:
    properties:
      id:
        type: integer
      tag:
        $ref: '#/definitions/models.Tag'
      tagId:
        type: integer
      title:
        type: string
    type: object
  models.Rank:
    properties:
      bestScoreQuiz:
        $ref: '#/definitions/models.Quiz'
      bestScoreQuizId:
        type: integer
      id:
        type: integer
      totalScore:
        type: integer
      user:
        $ref: '#/definitions/models.User'
      userId:
        type: integer
    type: object
  models.Tag:
    properties:
      description:
        type: string
      id:
        type: integer
    type: object
  models.User:
    description: User object
    properties:
      id:
        type: integer
      name:
        type: string
      password:
        minLength: 6
        type: string
      username:
        minLength: 3
        type: string
    required:
    - name
    - password
    - username
    type: object
  quizController.answerCheckResponse:
    properties:
      is_correct:
        type: boolean
    type: object
host: localhost:5000
info:
  contact: {}
  description: API desenvolvida para projeto academico
  title: API Mensina
  version: "1.0"
paths:
  /login:
    post:
      consumes:
      - application/json
      parameters:
      - description: Authentication data
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/dto.InputLoginDto'
      produces:
      - application/json
      responses:
        "201":
          description: Token
          schema:
            $ref: '#/definitions/dto.OutputToken'
      summary: Authenticate
      tags:
      - Auth
  /quiz:
    get:
      parameters:
      - description: Tag ID
        in: query
        name: tag_id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            items:
              $ref: '#/definitions/models.Quiz'
            type: array
      security:
      - BearerAuth: []
      summary: Get all quizzes
      tags:
      - Quiz
  /quiz/answer_check:
    get:
      parameters:
      - description: Answer ID
        in: query
        name: answer_id
        required: true
        type: string
      - description: Question ID
        in: query
        name: question_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/quizController.answerCheckResponse'
      security:
      - BearerAuth: []
      summary: Check
      tags:
      - Quiz
  /quiz/finish/{quiz_id}:
    delete:
      parameters:
      - description: Quiz ID
        in: path
        name: quiz_id
        required: true
        type: string
      responses:
        "204":
          description: Success
      security:
      - BearerAuth: []
      summary: Finish quiz
      tags:
      - Quiz
  /quiz/questions/{quiz_id}:
    get:
      parameters:
      - description: QUIZ ID
        in: path
        name: quiz_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            items:
              $ref: '#/definitions/dto.OutputQuestionDto'
            type: array
      security:
      - BearerAuth: []
      summary: Get question by Quiz_ID
      tags:
      - Quiz
  /quiz/start/{quiz_id}:
    get:
      parameters:
      - description: Quiz ID
        in: path
        name: quiz_id
        required: true
        type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/dto.QuizSession'
      security:
      - BearerAuth: []
      summary: Start quiz
      tags:
      - Quiz
  /rank:
    get:
      parameters:
      - description: Update Rank
        in: query
        name: update_rank
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            items:
              $ref: '#/definitions/models.Rank'
            type: array
      security:
      - BearerAuth: []
      summary: Get rank
      tags:
      - Rank
  /tag:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/models.Tag'
      security:
      - BearerAuth: []
      summary: Get all tags
      tags:
      - Tag
  /user:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
      summary: Get all users
      tags:
      - User
    post:
      consumes:
      - application/json
      parameters:
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.CreateUserDto'
      produces:
      - application/json
      responses:
        "201":
          description: User
          schema:
            $ref: '#/definitions/models.User'
      summary: Create a new user
      tags:
      - User
  /user/:
    delete:
      responses:
        "204":
          description: No Content
      security:
      - BearerAuth: []
      summary: Delete user
      tags:
      - User
    put:
      parameters:
      - description: User object
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateUserDto'
      responses:
        "204":
          description: Success
      security:
      - BearerAuth: []
      summary: Update user by ID
      tags:
      - User
  /user/icon:
    post:
      consumes:
      - multipart/form-data
      parameters:
      - description: Imagem do ícone do usuário (PNG, JPEG, etc.)
        in: formData
        name: file
        required: true
        type: file
      produces:
      - image/png
      responses:
        "200":
          description: Imagem processada com sucesso
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Upload de ícone de usuário
      tags:
      - User
  /user/kpi:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/dto.UserKpiDto'
      security:
      - BearerAuth: []
      summary: Get user kpi
      tags:
      - User
  /user/user_infos:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/models.User'
      security:
      - BearerAuth: []
      summary: Get user info with Token
      tags:
      - User
securityDefinitions:
  BearerAuth:
    description: 'Insira o token de autenticação no formato: "Bearer {token}"'
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
